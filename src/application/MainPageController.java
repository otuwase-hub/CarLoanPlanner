package application;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;

import javafx.scene.control.ChoiceBox;

import javafx.scene.control.TextField;

import java.net.URL;
import java.util.ResourceBundle;

import javafx.event.ActionEvent;

import javafx.scene.control.Label;

import javafx.scene.input.MouseEvent;


public class MainPageController implements Initializable{
	@FXML
	private Label monthlyLoanTermLabel;
	@FXML
	private Label monthlyPaymentLabel2;
	@FXML
	private Label monthlyPaymentLabel3;
	@FXML
	private Label monthlyPaymentLabel4;
	@FXML
	private Label monthlyPaymentLabel5;
	@FXML
	private TextField carPriceTextField;
	@FXML
	private TextField interestRateTextField;
	@FXML
	private TextField downPaymentTextField;
	@FXML
	private Label carPriceError;
	@FXML
	private Label carPriceDismiss;
	@FXML
	private Label interestRateError;
	@FXML
	private Label interestRateDismiss;
	@FXML
	private Label downPaymentError;
	@FXML
	private Label downPaymentDismiss;
	@FXML
	private Button calculateButton;
	@FXML
	private Button resetButton;
	@FXML
	private Label totalCostLabel;
	@FXML
	private ChoiceBox<String> loanTermChoiceBox;
	// create CarLoan object for all necessary calculations
	private CarLoan carLoan = new CarLoan(0,0,0);
	
	// cite: https://www.baeldung.com/java-check-string-number
	// method to check for double values
	public static boolean isDouble(String strNum) {
		if (strNum == null) {
	        return false;
	    }
	    try {
	        Double.parseDouble(strNum);
	    } catch (NumberFormatException NFE) {
	        return false;
	    }
	    return true;
	}
		
	// Event Listener on Label[#carPriceDismiss].onMouseClicked
	@FXML
	public void dismissCarPrice(MouseEvent event) {
		// TODO Autogenerated
		carPriceError.setText(null);
		carPriceDismiss.setText(null);
	}
	// Event Listener on Label[#interestRateDismiss].onMouseClicked
	@FXML
	public void dismissInterestRate(MouseEvent event) {
		// TODO Autogenerated
		interestRateError.setText(null);
		interestRateDismiss.setText(null);
	}
	// Event Listener on Label[#downPaymentDismiss].onMouseClicked
	@FXML
	public void dismissDownPayment(MouseEvent event) {
		// TODO Autogenerated
		downPaymentError.setText(null);
		downPaymentDismiss.setText(null);
	}
	// Event Listener on Button[#resetButton].onAction
	@FXML
	public void reset(ActionEvent event) {
		carPriceError.setText(null);
		carPriceDismiss.setText(null);
		interestRateError.setText(null);
		interestRateDismiss.setText(null);
		downPaymentError.setText(null);
		downPaymentDismiss.setText(null);
		carPriceTextField.setText(null);
		interestRateTextField.setText(null);
		downPaymentTextField.setText(null);
		monthlyPaymentLabel2.setText(null);
		monthlyPaymentLabel3.setText(null);
		monthlyPaymentLabel4.setText(null);
		monthlyPaymentLabel5.setText(null);
		totalCostLabel.setText(null);
		monthlyLoanTermLabel.setText(null);
		totalCostLabel.setText(null);
		loanTermChoiceBox.setValue(null);
		this.carLoan = new CarLoan(0,0,0);
	}
	// Event Listener on Button[#calculateButton].onAction
	@FXML
	public void displayResults(ActionEvent event) {
		// TODO Autogenerated
		// clear all error messages
		carPriceError.setText(null);
		carPriceDismiss.setText(null);
		interestRateError.setText(null);
		interestRateDismiss.setText(null);
		downPaymentError.setText(null);
		downPaymentDismiss.setText(null);
		loanTermChoiceBox.setValue(null);
		// initialize input variables from user input
		String carPrice = carPriceTextField.getText();
		String interestRate = interestRateTextField.getText();
		String downPayment = downPaymentTextField.getText();
		// check if car price is a valid input
		if(isDouble(carPrice) == false) {
			carPriceError.setText("Invalid input    ");
			carPriceDismiss.setText("dismiss");
			carPriceTextField.setText("1600.00");
		}
		// check if car price is less than lower limit
		else if(Double.parseDouble(carPrice) < 1600) {
			carPriceError.setText("min price is $1600.00");
			carPriceDismiss.setText("dismiss");
			carPriceTextField.setText("1600.00");
		}
		// check if car price is more than upper limit
		else if(Double.parseDouble(carPrice) > 2000000) {
			carPriceError.setText("max price is $2,000,000");
			carPriceDismiss.setText("dismiss");
			carPriceTextField.setText("2000000.00");
		}
		// reinitialize car price string variable
		carPrice = carPriceTextField.getText();
		// check if interest rate is valid input
		if(isDouble(interestRate) == false) {
			interestRateError.setText("Invalid input    ");
			interestRateDismiss.setText("dismiss");
			interestRateTextField.setText("1.25");
		}
		// check if interest rate is less than lower limit
		else if(Double.parseDouble(interestRate) < 1.25) {
			interestRateError.setText("min rate is 1.25%  ");
			interestRateDismiss.setText("dismiss");
			interestRateTextField.setText("1.25");
		}
		// check if interest rate is more than upper limit
		else if(Double.parseDouble(interestRate) > 40) {
			interestRateError.setText("max rate is 40%  ");
			interestRateDismiss.setText("dismiss");
			interestRateTextField.setText("40.00");
		}
		// reinitialize interest rate input string variable
		interestRate = interestRateTextField.getText();
		// check if down payment is valid input
		if(isDouble(downPayment) == false) {
			downPaymentError.setText("Invalid input  ");
			downPaymentDismiss.setText("dismiss");
			downPaymentTextField.setText("0.00");
		}
		// check if down payment is less than lower limit
		else if(Double.parseDouble(downPayment) < 0.0) {
			downPaymentError.setText("min downpayment is $0.00");
			downPaymentDismiss.setText("dismiss");
			downPaymentTextField.setText("0.00");
		}
		// check if down payment is more than upper limit
		else if(Double.parseDouble(downPayment) 
				> Double.parseDouble(carPrice)) {
			downPaymentError.setText(String.format("max downpayment is $%,.2f", 
					Double.parseDouble(carPrice)));
			downPaymentDismiss.setText("dismiss");
			downPaymentTextField.setText(String.format("%.2f", 
					Double.parseDouble(carPrice)));
		}
		// reinitialize downPayment input variable
		downPayment = downPaymentTextField.getText();
		// set object parameters
		carLoan.setCarPrice(Double.parseDouble(carPrice));
		carLoan.setDownPayment(Double.parseDouble(downPayment));
		carLoan.setInterestRate(Double.parseDouble(interestRate));
		// calculate monthly payment for each loan term
		double monthlyPayment2 = carLoan.getMonthlyPayment(2);
		double monthlyPayment3 = carLoan.getMonthlyPayment(3);
		double monthlyPayment4 = carLoan.getMonthlyPayment(4);
		double monthlyPayment5 = carLoan.getMonthlyPayment(5);
		int monthlyTerm = carLoan.getMonthlyLoanTerm(2);
		double totalPayments = carLoan.getTotalPayment(monthlyTerm);
		// display monthly payments for loan term 2, 3, 4, and 5
		monthlyPaymentLabel2.setText(String.format(
				"$%,.2f", monthlyPayment2));
		monthlyPaymentLabel3.setText(String.format(
				"$%,.2f", monthlyPayment3));
		monthlyPaymentLabel4.setText(String.format(
				"$%,.2f", monthlyPayment4));
		monthlyPaymentLabel5.setText(String.format(
				"$%,.2f", monthlyPayment5));
		// display default monthly loan term and total lifetime payment
		monthlyLoanTermLabel.setText(String.format(
				"%d MONTHS", monthlyTerm));
		totalCostLabel.setText(String.format(
				"$%,.2f", totalPayments));
	}
	
	// set on action handler for choice box
	public void setTotalPayment(ActionEvent event) {
		if(loanTermChoiceBox.getValue() != null) {
			int monthlyTerm = carLoan.getMonthlyLoanTerm(Integer.parseInt(loanTermChoiceBox.getValue()));
			double totalPayment = carLoan.getTotalPayment(monthlyTerm);
			monthlyLoanTermLabel.setText(String.format(
					"%d MONTHS", monthlyTerm));
			totalCostLabel.setText(String.format(
					"$%,.2f", totalPayment));
		}
	}
	
	private String[] yearLoanTerm = {"2", "3", "4", "5"};
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		loanTermChoiceBox.getItems().addAll(yearLoanTerm);
		loanTermChoiceBox.setOnAction(this::setTotalPayment);
	}
}
